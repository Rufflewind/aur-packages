#!/usr/bin/env python3
# Reads cabal.config and updates it along with PKGBUILD.
# This script is used by haskell/Makefile.

import argparse, json, os, pathlib, re, subprocess, sys, tempfile

# We exclude non-installable packages, as defined in: https://github.com/haskell/cabal/blob/5d3618a144991cbe04126abac4e68e7ce1b56df3/cabal-install/Distribution/Solver/Modular/Solver.hs#L136-L144
#
# (Most boot packages however can be reinstalled and it is often necessary to
# do so to satisfy constraints.)
NON_INSTALLABLE = [
    "base",
    "ghc-prim",
    "integer-gmp",
    "integer-simple",
    "template-haskell",
]

def download(url):
    return subprocess.check_output(
        ["curl", "-fL", url],
        universal_newlines=True,
    )

def get_metadata_revision(name, ver, cache_file):
    try:
        with open(cache_file) as f:
            cache = json.load(f)
    except OSError:
        cache = {}
    key = f"{name}-{ver}"
    if key not in cache:
        html = download(
            f"https://hackage.haskell.org/package/{name}-{ver}/revisions/"
        )
        rev = max(int(rev) for rev in
                  re.findall(r'/revision/(\d+).cabal"', html))
        cache[key] = rev
        with tempfile.NamedTemporaryFile(
                mode="w",
                dir=os.path.dirname(cache_file), delete=False) as f:
            json.dump(cache, f)
            os.rename(f.name, cache_file)
    return cache[key]

def read_cabal_config(
        cabal_config,
        boot_pkg_name_vers,
        metadata_cache,
        pkgname,
):
    constraints = []
    sources = []
    with open(cabal_config) as f:
        lines = list(f)
    pkgs = []
    for line in lines:
        match = re.search(
            r" (?:any\.)?([^\s=:]+) (==[\d.]+(?:\s*\|\|\s*==[\d.]+)*),?$",
            line,
        )
        if not match:
            continue
        name, vers_str = match.groups()
        vers = tuple(re.findall(r"==([\d.]+)", vers_str))
        boot_ver = boot_pkg_name_vers.get(name)
        if name in NON_INSTALLABLE or (boot_ver,) == vers:
            constraints.append(name + " installed")
            continue
        if boot_ver is not None:
            sys.stderr.write(
                f"Warning: {name} {vers} is a boot package "
                f"but of a different version (system: {boot_ver}). "
                f"This might cause problems later (?)\n")
        constraints.append(name + " ==" + vers[0])  # FIXME
        if name == pkgname:
            continue
        for ver in vers:
            pkgs.append((name, ver))
    for name, ver in pkgs:
        if re.match("rts$|z-.*-z-", name):
            continue
        tar_name = f"haskell-{name}-{ver}.tar.gz"
        tar = (f"{tar_name}::https://hackage.haskell.org/package/"
               f"{name}-{ver}/{name}-{ver}.tar.gz")
        sources.append(tar)
        rev = get_metadata_revision(name, ver, metadata_cache)
        if rev:
            sources.append(f"haskell-{name}-{ver}-{rev}.cabal::"
                           "https://hackage.haskell.org/package/"
                           f"{name}-{ver}/revision/{rev}.cabal")
    return sorted(sources), constraints

def update_cabal_config(cabal_config, constraints):
    with tempfile.NamedTemporaryFile(
            mode="w",
            dir=os.path.dirname(cabal_config), delete=False) as f:
        f.write("constraints: {}\n"
                .format(",\n             ".join(constraints)))
        os.rename(f.name, cabal_config)

def substitute(data, pattern, replacement):
    if not re.search(pattern, data):
        raise ValueError(f"substitution failed; cannot find: {pattern}")
    return re.sub(pattern, replacement, data, count=1)

def update_pkgbuild_array(pkgbuild_contents, name, values):
    value = ('\n' + ' ' * (len(name) + 2)).join(values)
    return substitute(
        pkgbuild_contents,
        fr"{name}=\([^)]*\)",
        f"{name}=({value})",
    )

def update_pkgbuild(pkgbuild, source):
    with open(pkgbuild) as f:
        contents = f.read()
    with tempfile.NamedTemporaryFile(
            mode="w",
            dir=os.path.dirname(pkgbuild), delete=False) as f:
        contents = update_pkgbuild_array(contents, "source", source)
        f.write(contents)
        os.rename(f.name, pkgbuild)

def list_packages(package_db):
    for filename in os.listdir(package_db):
        m = re.match(r"(?s)(.*)-([^-]*)\.conf\Z", filename)
        if m:
            yield m.groups()

p = argparse.ArgumentParser()
p.add_argument("--boot-pkg-db", default="/usr/lib/ghc/package.conf.d")
p.add_argument("--metadata-cache", default="metadata-revision.cache~")
p.add_argument("pkgname")
p.add_argument("cabal_config", default="cabal.config")
p.add_argument("pkgbuild")
args = p.parse_args()
boot_pkg_name_vers = dict(list_packages(args.boot_pkg_db))
sources, constraints = read_cabal_config(
    args.cabal_config,
    boot_pkg_name_vers,
    args.metadata_cache,
    args.pkgname,
)
#update_cabal_config(args.cabal_config, constraints)
sources = sorted(sources + [
    "haskell-{pkgname}-$pkgver.tar.gz::"
    "https://hackage.haskell.org/package/"
    "{pkgname}-$pkgver/{pkgname}-$pkgver.tar.gz"
    .format(pkgname=args.pkgname),
])
update_pkgbuild(args.pkgbuild, sources)
