#!/usr/bin/env python3
# "Stages" the changes to GitHub under a new "pkg-${pkgname}" branch and runs
# ./build_single.yml.
import os, re, shutil, subprocess, sys, tempfile

def cmd(cmd):
    return subprocess.run(
        cmd,
        check=True,
        stdout=subprocess.PIPE,
        universal_newlines=True,
    ).stdout.rstrip()

workflow_name = "build_single.yml"
user_name = "aur-packages/buildpkg"
workflows_dir = ".github/workflows"
pkg_repo = "."
root_repo = os.path.join(pkg_repo, "../..")

with open(os.path.join(pkg_repo, ".SRCINFO")) as f:
    pkgname, = re.search("pkgname = (.*)", f.read()).groups()
original_desc = cmd(["git", "-C", pkg_repo, "show", "-q", "--pretty=%h %s"])
origin_url = cmd(["git", "-C", root_repo, "remote", "get-url", "origin"])

# Prevent common mistake of forgetting to commit.
for repo in [pkg_repo, root_repo]:
    status = cmd(["git", "-C", repo, "status", "--porcelain"])
    if status:
        sys.stderr.write(f"[\x1b[31;1merror\x1b[0m] tree at {repo} is dirty:\n{status}\n")
        sys.stderr.flush()
        sys.exit(1)

with tempfile.TemporaryDirectory() as new_repo:
    cmd(["git", "clone", "-q", pkg_repo, new_repo])
    new_workflows_dir = os.path.join(new_repo, workflows_dir)
    os.makedirs(new_workflows_dir, exist_ok=True)
    shutil.copy2(
        os.path.join(root_repo, workflow_name),
        os.path.join(new_workflows_dir, workflow_name),
    )
    cmd(["git", "-C", new_repo, "config", "user.name", user_name])
    cmd(["git", "-C", new_repo, "config", "user.email", ""])
    cmd(["git", "-C", new_repo, "add", "-A"])
    cmd(["git", "-C", new_repo, "commit", "-m", f"{pkgname}: {original_desc}"])
    cmd(["git", "-C", new_repo, "remote", "set-url", "origin", origin_url])
    cmd(["git", "-C", new_repo, "push", "-f", "origin", f"HEAD:pkg-{pkgname}"])
